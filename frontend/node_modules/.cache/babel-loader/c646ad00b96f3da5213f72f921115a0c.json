{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mac1005\\\\Documents\\\\ws-devsuperior\\\\projeto-sds3\\\\frontend\\\\src\\\\components\\\\BarChart\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { round } from 'utils/format';\nimport { BASE_URL } from 'utils/request';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BarChart = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({\n    labels: {\n      categories: []\n    },\n    series: [{\n      name: \"\",\n      data: []\n    }]\n  });\n  useEffect(() => {\n    axios.get(`${BASE_URL}/sales/success-by-seller`).then(response => {\n      const data = response.data;\n      const myLabel = data.map(x => x.sellerName);\n      const mySeries = data.map(x => round(100 * x.deals / x.visited, 1));\n      setChartData({\n        labels: {\n          categories: myLabel\n        },\n        series: [{\n          name: \"% Sucesso\",\n          data: mySeries\n        }]\n      });\n    });\n  }, []);\n  const options = {\n    plotOptions: {\n      bar: {\n        horizontal: true\n      }\n    }\n  };\n  const mockData = {\n    labels: {\n      categories: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n    },\n    series: [{\n      name: \"% Sucesso\",\n      data: [43.6, 67.1, 67.7, 45.6, 71.1]\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      xaxis: chartData.labels\n    },\n    series: mockData.series,\n    type: \"bar\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BarChart, \"mJMs6XQzXfwSE+h9KE4K20U4AYI=\");\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["C:/Users/mac1005/Documents/ws-devsuperior/projeto-sds3/frontend/src/components/BarChart/index.tsx"],"names":["axios","useEffect","useState","Chart","round","BASE_URL","BarChart","chartData","setChartData","labels","categories","series","name","data","get","then","response","myLabel","map","x","sellerName","mySeries","deals","visited","options","plotOptions","bar","horizontal","mockData","xaxis"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,QAAT,QAAyB,eAAzB;;;AAcA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAY;AAClDO,IAAAA,MAAM,EAAE;AACJC,MAAAA,UAAU,EAAE;AADR,KAD0C;AAIlDC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,EADV;AAEIC,MAAAA,IAAI,EAAE;AAFV,KADI;AAJ0C,GAAZ,CAA1C;AAYAZ,EAAAA,SAAS,CAAC,MAAM;AACZD,IAAAA,KAAK,CAACc,GAAN,CAAW,GAAET,QAAS,0BAAtB,EACKU,IADL,CACUC,QAAQ,IAAI;AACd,YAAMH,IAAI,GAAGG,QAAQ,CAACH,IAAtB;AACA,YAAMI,OAAO,GAAGJ,IAAI,CAACK,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,UAAhB,CAAhB;AACA,YAAMC,QAAQ,GAAGR,IAAI,CAACK,GAAL,CAASC,CAAC,IAAIf,KAAK,CAAC,MAAMe,CAAC,CAACG,KAAR,GAAgBH,CAAC,CAACI,OAAnB,EAA2B,CAA3B,CAAnB,CAAjB;AAEAf,MAAAA,YAAY,CAAC;AACTC,QAAAA,MAAM,EAAE;AACJC,UAAAA,UAAU,EAAEO;AADR,SADC;AAITN,QAAAA,MAAM,EAAE,CACJ;AACIC,UAAAA,IAAI,EAAE,WADV;AAEIC,UAAAA,IAAI,EAAEQ;AAFV,SADI;AAJC,OAAD,CAAZ;AAWH,KAjBL;AAkBH,GAnBQ,EAmBN,EAnBM,CAAT;AAqBA,QAAMG,OAAO,GAAG;AACZC,IAAAA,WAAW,EAAE;AACTC,MAAAA,GAAG,EAAE;AACDC,QAAAA,UAAU,EAAE;AADX;AADI;AADD,GAAhB;AAQA,QAAMC,QAAQ,GAAG;AACbnB,IAAAA,MAAM,EAAE;AACJC,MAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,aAAX,EAA0B,QAA1B,EAAoC,OAApC,EAA6C,OAA7C;AADR,KADK;AAIbC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,WADV;AAEIC,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB;AAFV,KADI;AAJK,GAAjB;AAYA,sBACI,QAAC,KAAD;AACI,IAAA,OAAO,EAAE,EAAE,GAAGW,OAAL;AAAcK,MAAAA,KAAK,EAAEtB,SAAS,CAACE;AAA/B,KADb;AAEI,IAAA,MAAM,EAAEmB,QAAQ,CAACjB,MAFrB;AAGI,IAAA,IAAI,EAAC,KAHT;AAII,IAAA,MAAM,EAAC;AAJX;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA/DD;;GAAML,Q;;KAAAA,Q;AAiEN,eAAeA,QAAf","sourcesContent":["import axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport Chart from 'react-apexcharts'\r\nimport { SaleSuccess } from 'types/sale'\r\nimport { round } from 'utils/format'\r\nimport { BASE_URL } from 'utils/request'\r\n\r\ntype SeriesData = {\r\n    name: string;\r\n    data: number[];\r\n}\r\n\r\ntype ChartData = {\r\n    labels: {\r\n        categories: string[];\r\n    };\r\n    series: SeriesData[];\r\n}\r\n\r\nconst BarChart = () => {\r\n\r\n    const [chartData, setChartData] = useState<ChartData>({\r\n        labels: {\r\n            categories: []\r\n        },\r\n        series: [\r\n            {\r\n                name: \"\",\r\n                data: []\r\n            }\r\n        ]\r\n    });\r\n\r\n    useEffect(() => {\r\n        axios.get(`${BASE_URL}/sales/success-by-seller`)\r\n            .then(response => {\r\n                const data = response.data as SaleSuccess[];\r\n                const myLabel = data.map(x => x.sellerName);\r\n                const mySeries = data.map(x => round(100 * x.deals / x.visited,1));\r\n\r\n                setChartData({\r\n                    labels: {\r\n                        categories: myLabel\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: \"% Sucesso\",\r\n                            data: mySeries\r\n                        }\r\n                    ]\r\n                });\r\n            });\r\n    }, []);\r\n\r\n    const options = {\r\n        plotOptions: {\r\n            bar: {\r\n                horizontal: true,\r\n            }\r\n        },\r\n    };\r\n\r\n    const mockData = {\r\n        labels: {\r\n            categories: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\r\n        },\r\n        series: [\r\n            {\r\n                name: \"% Sucesso\",\r\n                data: [43.6, 67.1, 67.7, 45.6, 71.1]\r\n            }\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <Chart\r\n            options={{ ...options, xaxis: chartData.labels }}\r\n            series={mockData.series}\r\n            type=\"bar\"\r\n            height=\"240\"\r\n        />\r\n    );\r\n}\r\n\r\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}